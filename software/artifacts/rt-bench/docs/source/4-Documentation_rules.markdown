# Documentation rules {#docrules}

[TOC]

## Building the documentation locally

The documentation is available in pdf and html, and it is generated in the `docs` folder.

## Dependencies

- [Doxygen](doxygen.nl) 1.9.1+
- Make
- Dot tool, part of the graphviz package
- git
- sed
- pdflatex (only to generate documentation in pdf format.)
- [Doxygen Awesome](https://github.com/jothepro/doxygen-awesome-css) (will be set up automatically)
- A working internet connection

For [Nix](https://nixos.org/) users a flake and a [direnv](https://direnv.net/) environment are available to make sure that all the dependencies are satisfied.

## Build targets

There are several make target that correspond to different documentation formats:

- `html`: Will generate a static website under the `docs/html` folder. For ease of use, the site home page will be linked in `docs/Documentation.html`.
- `pdf`: Will generate a pdf file optimized for being read from a screen in the `docs/pdf` folder.
- `print`: Will generate a pdf file optimized for being printed in A4 format in the `pdf` folder. Be sure to also print everything in the `pdf/attachments` folder or some references will be missing.
- `clean`: Will remove the generated documentation files.

If you want to move the documentation be sure to move the whole `pdf` and/or `html` folder, so that you will include also the linked documents. The documentation can be accessed by opening the `Documentation.pdf` for the pdf version or by opening to `index.html` for the html version.

Note the if you make a link to `Documentation.pdf` links to documents in `pdf/attachments` will break.

## General documentation rules

The whole repository is following these documentation rules, to make the code as readable as possible:

Documentation is generated by doxygen, a manual to understand how to generate documentation easily from source code is available at: https://www.doxygen.nl/manual/index.html.

At the time of writing only the following file types are included in the documentation:

- `.c` source files.
- `.h` header files.
- `.py` files.
- `.markdown` files for documentation pages located in `docs/source` (doxygen has some quirks with the markdown syntax, refer to this explanation: https://www.doxygen.nl/manual/markdown.html). In addition the alphabetical ordering of the files in `docs/source` will be reflected in the ordering of the pages in the documentation, so it is advised to use numbers in the file name (Which is ignored by doxygen) to order the pages as needed.
- `.dox` files, used for modules documentation (in `docs/source/modules`, to have all the modules in the same place and avoiding searching the module definition in different source files).

Doxygen configuration is stored in the following text file `docs/conf/Doxyfile`.

The doxyfile contains several parameters, the most useful are:

- `FILE_PATTERNS`: The file types that will be included in the documentation.
- `INPUT`: The folders that Doxygen will scan to generate the documentation.
- `EXCLUDE_PATTERNS`: Path and files to exclude.
- `EXCLUDE_SYMBOLS`: symbols to exclude.

You can freely link documents of any type in the documentation, place them in the `docs/source/attachments` folder and when linking them use the path from `attachments` onwards, see how [SD-VBS](attachments/SD-VBS.pdf) is linked here by looking at the markdown version of this file (`docs/source/2-Documentation_rules.markdown`).

In general urls should not be masked and links to documents should contain the document filename or title, to make the documentation readable even if printed.

In each authored file make sure to add the following snippet:
```
@author Author
@copyright [year file created] - [last year file modified], [file author] <[author email]> and the [project name] contributors
SPDX-License-Identifier: [SPDX license expression]
```
For `.md`, `.markdown` and `.dox` files the snipped should be at the end of the file, while for all the other file formats the snippet should be in doxygen comment that describes the whole file.

It is possible to claim authorship of any documented piece of code by adding this snippet in any of the doxygen comments.

## Documenting bugs

One of the great features of doxygen is the automatic creation of a buglist in the documentation.
To trigger the buglist it is sufficient to use the `@bug` directive in any doxygen comment and to explain the bug found that is not yet resolved.
In this way for each new commit all the know issues can be documented easily.

## Documenting benchmark and benchmarks sets

Each benchmark must be documented a module, and a part of a benchmark set, which must also be documented as a module.
To do so a folder must be created in `docs/source/modules`, with the benchmark set name; inside that folder there must be a .dox file for the benchmark set and a .dox file for the each benchmark. Refer to [Extending RT-Bench](3-Extending_rt-bench.markdown) for more details and examples.

## Documenting files

Source and header files must include some documentation relative to the file contents, otherwise doxygen will mess up the documentation pages.
Below there is an example of how a file called `new_benchmark.c` should be documented:

```{.c}
/**
* @file benchmark_file.c
* @ingroup new_benchmark
* @author Author
* @brief Benchmark brief description
* @details
* Benchmark detailed description.
*
* @copyright [year file created] - [last year file modified], [file author] <[author email]> and the [project name] contributors
* SPDX-License-Identifier: [SPDX license expression]
*/
```

Also files should be included in the module that defines them.

For licensing use a valid SPDX license expression and make sure that the license full-text is included as a file in the `LICENSES` folder.

An SPDX license expression can be a simple license identifier from the [SPDX license list](https://spdx.org/licenses/) or a more complex expression, refer to [here](https://spdx.dev/resources/use/) and [here](https://github.com/david-a-wheeler/spdx-tutorial/) for further information.

## Documenting symbols

Most global symbols should be documented to improve code readability, in particular:

- Functions:
  Function documentation is split in two parts:
- Prototype documentation, which will describe briefly what the function does, the parameters taken and the return value:

```{.c}
/**
* @brief brief description.
* @param[in,out] parameter_name parameter description.
* @details
* Long description of what the function does.
* @returns possible return values.
*/
int foo(float bar);
```

- Implementation documentation, which will describe how the function is implemented if it is not obvious or there are some aspects of the implementation to keep in mind:

```{.c}
/**
* Description of the function implementation.
*/
int foo(float bar){
...
};
```

Doxygen will merge these two comments in the documentation allowing implementation modifications without requiring modifications of header files.
If some functions have multiple implementations (like method overriding in object-Oriented languages), or if functions are not exported (thus they have no prototypes) prototype documentation will be used to document the implementation and will include implementation details.
In case of multiple implementations is best to exclude from the documentation the exported prototypes, refer to `base/periodic_benchmark.h` for a working example.

- Structs should be documented by describing what the struct represents and what do each member represents:

  ```{.c}
  /**
  * @brief brief description.
  * @details Long description.
  */
  struct foo{
    int bar; ///< Member description
  };
  ```

- Global variables should be documented describing what the variable represents, usually a one-line doxygen comment (started with `///`) is enough, but multi-line doxygen comments are also supported.
- Macros should be documented as global variables or functions, depending on how they are used.

Finally it is a good practice to comment everything that is not obvious to the reader (especially cycles) to augment the code readability. Some good principles to comment and format code are on the [coding style guidelines of the linux kernel](https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting).

## Updating documentation online

Since the project was moved on GitLab, documentation is build automatically with continuous integration, if you are interested in how this is done, check the [GitLab Pages tutorial](https://docs.gitlab.com/ee/user/project/pages/) and this project configuration, stored in `.gitlab-ci.yml`.

@author Mattia Nicolella
@copyright (C) 2021 - 2022, Mattia Nicolella <mnico@bu.edu> and the rt-bench contributors.
SPDX-License-Identifier: MIT
