/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var DEFAULT_SETTINGS = {
    podcastTemplate: "---\ntags: [Podcast]\ndate: {{Date}}\n---\n# {{Title}}\n![]({{ImageURL}})\n## Description:\n{{Description}}\n-> [Podcast Link]({{PodcastURL}})\n\n## Notes:\n",
    atCursor: false,
    fileName: "{{Title}} - Notes",
    folder: "",
    templatePath: ""
};
var HOSTS = {
    spotify: "open.spotify.com",
    apple: "podcasts.apple.com",
    google: "podcasts.google.com",
    pocketcasts: "pca.st",
    airr: "www.airr.io",
    overcast: "overcast.fm",
    castbox: "castbox.fm",
    castro: "castro.fm",
    youtube: "youtube.com",
    addict: "podcastaddict.com"
};
var DEFAULT_PODCAST = {
    date: "",
    title: "Title not found",
    desc: "Description not found",
    imageLink: "",
    showNotes: "",
    episodeDate: "",
    url: ""
};
var NoteCreationMethod;
(function (NoteCreationMethod) {
    NoteCreationMethod[NoteCreationMethod["NewNote"] = 0] = "NewNote";
    NoteCreationMethod[NoteCreationMethod["AddAtCursor"] = 1] = "AddAtCursor";
})(NoteCreationMethod || (NoteCreationMethod = {}));

var PodcastParser = /** @class */ (function () {
    function PodcastParser(template) {
        this.template = template;
    }
    PodcastParser.prototype.requestHTML = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var response, parser, reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, obsidian.request({ url: url, method: "GET" })];
                    case 1:
                        response = _a.sent();
                        parser = new DOMParser();
                        return [2 /*return*/, parser.parseFromString(response, "text/html")];
                    case 2:
                        reason_1 = _a.sent();
                        new obsidian.Notice("Error loading podcast: " + reason_1);
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PodcastParser.prototype.loadEpisodeUUID = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, obsidian.request({ url: url })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response];
                }
            });
        });
    };
    PodcastParser.prototype.sanitizeString = function (str) {
        return str.replace(/[\-|\{|\}|:|,|\[|\]|\||\>|\<|\#|\"|\']/g, " ");
    };
    PodcastParser.prototype.sanitizePodcast = function (podcast) {
        podcast.title = this.sanitizeString(podcast.title);
        podcast.desc = this.sanitizeString(podcast.desc);
        podcast.showNotes = this.sanitizeString(podcast.showNotes);
        return podcast;
    };
    PodcastParser.prototype.applyTemplate = function (podcast) {
        podcast = this.sanitizePodcast(podcast);
        var content = this.template
            .replace(/{{Title}}/g, podcast.title)
            .replace(/{{ImageURL}}/g, podcast.imageLink)
            .replace(/{{Description}}/g, podcast.desc)
            .replace(/{{Date}}/g, podcast.date)
            .replace(/{{Timestamp}}/g, Date.now().toString())
            .replace(/{{PodcastURL}}/g, podcast.url)
            .replace(/{{ShowNotes}}/g, podcast.showNotes)
            .replace(/{{EpisodeDate}}/g, podcast.episodeDate);
        return { title: podcast.title, content: content };
    };
    PodcastParser.prototype.metaOG = function (root, attribute, og) {
        var titleTag = root.querySelector("meta[" + attribute + "='og:" + og + "']");
        if (titleTag) {
            var title = titleTag.getAttribute("content");
            if (title) {
                return title;
            }
        }
        return "";
    };
    PodcastParser.prototype.loadPodcast = function (root, url) {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function () {
            var podcast, artwork, script, scriptHtml, regex, uuid, json_notes, _g, _h, episodeDateHTML;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        podcast = DEFAULT_PODCAST;
                        podcast.url = url;
                        podcast.date = obsidian.moment().format("YYYY-MM-DD");
                        if (!url.includes(HOSTS.apple)) return [3 /*break*/, 1];
                        podcast.title = this.metaOG(root, "property", "title");
                        podcast.desc =
                            ((_b = (_a = root.querySelector(".product-hero-desc__section")) === null || _a === void 0 ? void 0 : _a.querySelector("p")) === null || _b === void 0 ? void 0 : _b.innerHTML) || "";
                        artwork = root.querySelector(".we-artwork__source");
                        podcast.imageLink = ((_c = artwork === null || artwork === void 0 ? void 0 : artwork.getAttribute("srcset")) === null || _c === void 0 ? void 0 : _c.split(" ")[0]) || "";
                        return [3 /*break*/, 8];
                    case 1:
                        if (!url.includes(HOSTS.airr)) return [3 /*break*/, 2];
                        podcast.title = this.metaOG(root, "property", "title");
                        podcast.desc = this.metaOG(root, "name", "description");
                        podcast.imageLink = this.metaOG(root, "property", "image");
                        return [3 /*break*/, 8];
                    case 2:
                        if (!url.includes(HOSTS.overcast)) return [3 /*break*/, 3];
                        podcast.title = this.metaOG(root, "name", "title");
                        podcast.desc = this.metaOG(root, "name", "description");
                        podcast.imageLink = this.metaOG(root, "name", "image");
                        return [3 /*break*/, 8];
                    case 3:
                        if (!url.includes(HOSTS.youtube)) return [3 /*break*/, 4];
                        podcast.title =
                            ((_d = root.querySelector("title")) === null || _d === void 0 ? void 0 : _d.innerHTML) || "Title not found";
                        podcast.desc =
                            ((_e = root
                                .querySelector("#watch7-content > meta:nth-child(3)")) === null || _e === void 0 ? void 0 : _e.getAttribute("content")) || "";
                        //desc = root.querySelector(".ytd-video-secondary-info-renderer").innerHTML;
                        podcast.imageLink = this.metaOG(root, "property", "image");
                        return [3 /*break*/, 8];
                    case 4:
                        if (!url.includes(HOSTS.pocketcasts)) return [3 /*break*/, 7];
                        podcast.title = this.metaOG(root, "property", "title");
                        script = root.querySelector("body > script");
                        if (!script) return [3 /*break*/, 6];
                        scriptHtml = script.innerHTML;
                        regex = /EPISODE_UUID = '(.*)'/gm;
                        uuid = regex.exec(scriptHtml);
                        if (!uuid) return [3 /*break*/, 6];
                        _h = (_g = JSON).parse;
                        return [4 /*yield*/, this.loadEpisodeUUID("https://cache.pocketcasts.com/share/episode/show_notes/" +
                                uuid[1])];
                    case 5:
                        json_notes = _h.apply(_g, [_j.sent()])["show_notes"];
                        podcast.showNotes = obsidian.htmlToMarkdown(json_notes);
                        _j.label = 6;
                    case 6:
                        podcast.desc = this.metaOG(root, "property", "description");
                        episodeDateHTML = root.querySelector("#episode_date");
                        if (episodeDateHTML) {
                            podcast.episodeDate = episodeDateHTML.innerHTML;
                        }
                        podcast.imageLink = this.metaOG(root, "property", "image");
                        return [3 /*break*/, 8];
                    case 7:
                        if (url.includes(HOSTS.castro)) {
                            podcast.title = this.metaOG(root, "property", "title");
                            podcast.desc = this.metaOG(root, "property", "description");
                            podcast.imageLink = this.metaOG(root, "property", "image");
                            podcast.showNotes = obsidian.htmlToMarkdown(((_f = root.querySelector(".co-supertop-castro-show-notes")) === null || _f === void 0 ? void 0 : _f.innerHTML) || "");
                        }
                        else if (url.includes(HOSTS.addict)) {
                            podcast.title = this.metaOG(root, "property", "title");
                            podcast.desc = this.metaOG(root, "property", "description");
                            podcast.imageLink = this.metaOG(root, "property", "image");
                        }
                        else {
                            podcast.title = this.metaOG(root, "property", "title");
                            podcast.desc = this.metaOG(root, "property", "description");
                            podcast.imageLink = this.metaOG(root, "property", "image");
                        }
                        _j.label = 8;
                    case 8:
                        // Obsidian mobile can only transclude images with https urls
                        if (!podcast.imageLink.startsWith("https")) {
                            podcast.imageLink = podcast.imageLink.replace("http", "https");
                        }
                        return [2 /*return*/, podcast];
                }
            });
        });
    };
    PodcastParser.prototype.getPodcastNote = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var root, podcast, podcastNote;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.requestHTML(url)];
                    case 1:
                        root = _a.sent();
                        if (!root) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.loadPodcast(root, url)];
                    case 2:
                        podcast = _a.sent();
                        podcastNote = this.applyTemplate(podcast);
                        return [2 /*return*/, podcastNote];
                    case 3: return [2 /*return*/, { title: "", content: "" }];
                }
            });
        });
    };
    PodcastParser.prototype.isPodcastURLSupported = function (url) {
        if (new RegExp(Object.values(HOSTS).join("|")).test(url)) {
            return true;
        }
        else {
            new obsidian.Notice("This podcast service is not supported.");
            return false;
        }
    };
    PodcastParser.prototype.getPodcastURLsFromSelection = function (selection) {
        var reg = /\[([^\]]*)\]\(([^\)]+)\)/g;
        var m;
        var podcasts = [];
        // Search for markdown links
        while ((m = reg.exec(selection)) !== null) {
            var url = m[2];
            var linkTitle = m[1];
            podcasts.push({ url: url, alias: "|" + linkTitle, markdown: m[0] });
        }
        // Search for pure links
        var words = selection.split(/[\r\n|\n|\r|\s]/);
        console.log(words);
        words.forEach(function (word) {
            if (word.startsWith("https://")) {
                podcasts.push({ url: word, alias: "", markdown: word });
            }
        });
        return podcasts;
    };
    PodcastParser.prototype.getPodcastsFromSelection = function (selection) {
        var _this = this;
        var podcasts = [];
        var urls = this.getPodcastURLsFromSelection(selection);
        urls.forEach(function (url) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = podcasts).push;
                        return [4 /*yield*/, this.getPodcastNote(url.url)];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        return [2 /*return*/];
                }
            });
        }); });
        return podcasts;
    };
    return PodcastParser;
}());

var NoteCreator = /** @class */ (function () {
    function NoteCreator(app, filenameTemplate) {
        this.app = app;
        this.filenameTemplate = filenameTemplate;
    }
    NoteCreator.prototype.addPodcastAtCursor = function (podcast, editor) {
        var currentLine = editor.getCursor();
        editor.replaceRange(podcast.content, currentLine, currentLine);
    };
    NoteCreator.prototype.applyFileNameTemplate = function (podcast) {
        return this.filenameTemplate
            .replace(/{{Title}}/g, podcast.title)
            .replace(/{{Timestamp}}/g, Date.now().toString())
            .replace(/{{Date}}/g, obsidian.moment().format("YYYY-MM-DD"))
            .replace(/[\\/:"*?<>|]*/g, "");
    };
    NoteCreator.prototype.createPodcastNote = function (podcast, folder) {
        var fileName = this.applyFileNameTemplate(podcast);
        this.app.vault.create(folder + "/" + fileName + ".md", podcast.content);
        return fileName;
    };
    return NoteCreator;
}());

var PodcastNote = /** @class */ (function (_super) {
    __extends(PodcastNote, _super);
    function PodcastNote() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PodcastNote.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("loading plugin PodcastNote");
                        return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        _a.sent();
                        this.addSettingTab(new PodcastNoteSettingTab(this.app, this));
                        this.addCommand({
                            id: "add-podcast-note",
                            name: "Add Podcast Note",
                            checkCallback: function (checking) {
                                var leaf = _this.app.workspace.activeLeaf;
                                if (leaf) {
                                    if (!checking) {
                                        new PodcastNoteModal(_this.app, _this).open();
                                    }
                                    return true;
                                }
                                return false;
                            }
                        });
                        this.addCommand({
                            id: "add-podcast-notes-from-selection",
                            name: "Add Podcast Notes from selection",
                            editorCallback: function () {
                                _this.createPodcastNotesFromSelection();
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.onunload = function () {
        console.log("unloading plugin PodcastNote");
    };
    PodcastNote.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [{}, DEFAULT_SETTINGS];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.getEditor = function () {
        var mdView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (mdView) {
            return mdView.editor;
        }
    };
    PodcastNote.prototype.getTemplate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var path, file;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.settings.templatePath != "")) return [3 /*break*/, 2];
                        path = this.settings.templatePath;
                        if (!path.endsWith(".md")) {
                            path += ".md";
                        }
                        file = this.app.metadataCache.getFirstLinkpathDest(path, "");
                        if (!file) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, this.settings.podcastTemplate];
                }
            });
        });
    };
    PodcastNote.prototype.newPodcastNote = function (url, method) {
        return __awaiter(this, void 0, void 0, function () {
            var template, parser, podcastNote, nc, editor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTemplate()];
                    case 1:
                        template = _a.sent();
                        parser = new PodcastParser(template);
                        new obsidian.Notice("Loading Podcast Info");
                        if (!parser.isPodcastURLSupported(url)) return [3 /*break*/, 3];
                        return [4 /*yield*/, parser.getPodcastNote(url)];
                    case 2:
                        podcastNote = _a.sent();
                        nc = new NoteCreator(this.app, this.settings.fileName);
                        switch (method) {
                            case NoteCreationMethod.NewNote:
                                nc.createPodcastNote(podcastNote, this.settings.folder);
                                break;
                            case NoteCreationMethod.AddAtCursor:
                                editor = this.getEditor();
                                if (editor) {
                                    nc.addPodcastAtCursor(podcastNote, editor);
                                }
                                else {
                                    new obsidian.Notice("You have to be in the editor to do this.");
                                }
                                break;
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.createPodcastNotesFromSelection = function () {
        return __awaiter(this, void 0, void 0, function () {
            var template, editor, parser, selection, links, nc, _i, links_1, link, podcastNote, filename;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTemplate()];
                    case 1:
                        template = _a.sent();
                        editor = this.getEditor();
                        parser = new PodcastParser(template);
                        new obsidian.Notice("Loading Podcast Info");
                        if (!editor) return [3 /*break*/, 7];
                        selection = editor.getSelection();
                        return [4 /*yield*/, parser.getPodcastURLsFromSelection(selection)];
                    case 2:
                        links = _a.sent();
                        nc = new NoteCreator(this.app, this.settings.fileName);
                        _i = 0, links_1 = links;
                        _a.label = 3;
                    case 3:
                        if (!(_i < links_1.length)) return [3 /*break*/, 6];
                        link = links_1[_i];
                        if (!parser.isPodcastURLSupported(link.url)) return [3 /*break*/, 5];
                        return [4 /*yield*/, parser.getPodcastNote(link.url)];
                    case 4:
                        podcastNote = _a.sent();
                        filename = nc.createPodcastNote(podcastNote, this.settings.folder);
                        selection = selection.replace(link.markdown, "[[" + filename + link.alias + "]]");
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 3];
                    case 6:
                        editor.replaceSelection(selection);
                        return [3 /*break*/, 8];
                    case 7:
                        new obsidian.Notice("You have to be in the editor to do this.");
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return PodcastNote;
}(obsidian.Plugin));
var PodcastNoteModal = /** @class */ (function (_super) {
    __extends(PodcastNoteModal, _super);
    function PodcastNoteModal(app, plugin) {
        var _this = _super.call(this, app) || this;
        _this.plugin = plugin;
        return _this;
    }
    PodcastNoteModal.prototype.onOpen = function () {
        var _this = this;
        var contentEl = this.contentEl;
        contentEl.createEl("h3", { text: "Enter podcast URL:" });
        var input = contentEl.createEl("input", { type: "text" });
        contentEl.createEl("br");
        contentEl.createEl("br");
        var button = contentEl.createEl("button", { text: "Add Podcast Note" });
        button.addEventListener("click", function () {
            var url = input.value;
            if (_this.plugin.settings.atCursor) {
                _this.plugin.newPodcastNote(url, NoteCreationMethod.AddAtCursor);
            }
            else {
                _this.plugin.newPodcastNote(url, NoteCreationMethod.NewNote);
            }
            _this.close();
        });
    };
    PodcastNoteModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return PodcastNoteModal;
}(obsidian.Modal));
var PodcastNoteSettingTab = /** @class */ (function (_super) {
    __extends(PodcastNoteSettingTab, _super);
    function PodcastNoteSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    PodcastNoteSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Settings for Podcast Note" });
        new obsidian.Setting(containerEl)
            .setName("Template")
            .setDesc("Define your own template. Available placeholders are: {{Title}}, {{ImageURL}}, {{Description}}, {{ShowNotes}}, {{EpisodeDate}}, {{PodcastURL}}, {{Date}}, {{Timestamp}}")
            .addTextArea(function (textarea) {
            textarea
                .setValue(_this.plugin.settings.podcastTemplate)
                .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.podcastTemplate = textarea.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            textarea.inputEl.rows = 10;
            textarea.inputEl.cols = 35;
        });
        new obsidian.Setting(containerEl)
            .setName("Template File")
            .setDesc("Define your own template in a .md file. Enter the path here (relative to vault)")
            .addTextArea(function (textarea) {
            return textarea
                .setValue(_this.plugin.settings.templatePath)
                .setPlaceholder("path/to/template")
                .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.templatePath = textarea.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Folder")
            .setDesc("New Podcast Notes will be saved here (default: Vault folder)")
            .addTextArea(function (textarea) {
            return textarea
                .setValue(_this.plugin.settings.folder)
                .setPlaceholder("example: Podcasts")
                .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.folder = textarea.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Filename template")
            .setDesc('Filename template when "New note" is selected. Available placeholders are {{Title}}, {{Timestamp}}, {{Date}}')
            .addTextArea(function (textarea) {
            return textarea.setValue(_this.plugin.settings.fileName).onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.fileName = textarea.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Insert at cursor")
            .setDesc("Insert podcast note at cursor (default: create new note)")
            .addToggle(function (toggle) {
            return toggle.setValue(_this.plugin.settings.atCursor).onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.atCursor = toggle.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        containerEl.createEl("hr");
        containerEl.createEl("p", { text: "Supported podcast services:" });
        var ul = containerEl.createEl("ul");
        ul.createEl("li", { text: "Apple" });
        ul.createEl("li", { text: "Spotify" });
        ul.createEl("li", { text: "Google" });
        ul.createEl("li", { text: "Pocket Casts" });
        ul.createEl("li", { text: "Airr" });
        ul.createEl("li", { text: "Overcast" });
        ul.createEl("li", { text: "Castro" });
        ul.createEl("li", { text: "Podcast Addict" });
        ul.createEl("li", { text: "YouTube" });
    };
    return PodcastNoteSettingTab;
}(obsidian.PluginSettingTab));

module.exports = PodcastNote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy9jb25zdGFudHMudHN4Iiwic3JjL1BvZGNhc3RQYXJzZXIudHN4Iiwic3JjL05vdGVDcmVhdG9yLnRzeCIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCJpbXBvcnQgeyBQb2RjYXN0Tm90ZVNldHRpbmdzLCBQb2RjYXN0IH0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUG9kY2FzdE5vdGVTZXR0aW5ncyA9IHtcbiAgcG9kY2FzdFRlbXBsYXRlOlxuICAgIFwiLS0tXFxudGFnczogW1BvZGNhc3RdXFxuZGF0ZToge3tEYXRlfX1cXG4tLS1cXG4jIHt7VGl0bGV9fVxcbiFbXSh7e0ltYWdlVVJMfX0pXFxuIyMgRGVzY3JpcHRpb246XFxue3tEZXNjcmlwdGlvbn19XFxuLT4gW1BvZGNhc3QgTGlua10oe3tQb2RjYXN0VVJMfX0pXFxuXFxuIyMgTm90ZXM6XFxuXCIsXG4gIGF0Q3Vyc29yOiBmYWxzZSxcbiAgZmlsZU5hbWU6IFwie3tUaXRsZX19IC0gTm90ZXNcIixcbiAgZm9sZGVyOiBcIlwiLFxuICB0ZW1wbGF0ZVBhdGg6IFwiXCIsXG59O1xuXG5leHBvcnQgY29uc3QgSE9TVFMgPSB7XG4gIHNwb3RpZnk6IFwib3Blbi5zcG90aWZ5LmNvbVwiLFxuICBhcHBsZTogXCJwb2RjYXN0cy5hcHBsZS5jb21cIixcbiAgZ29vZ2xlOiBcInBvZGNhc3RzLmdvb2dsZS5jb21cIixcbiAgcG9ja2V0Y2FzdHM6IFwicGNhLnN0XCIsXG4gIGFpcnI6IFwid3d3LmFpcnIuaW9cIixcbiAgb3ZlcmNhc3Q6IFwib3ZlcmNhc3QuZm1cIixcbiAgY2FzdGJveDogXCJjYXN0Ym94LmZtXCIsXG4gIGNhc3RybzogXCJjYXN0cm8uZm1cIixcbiAgeW91dHViZTogXCJ5b3V0dWJlLmNvbVwiLFxuICBhZGRpY3Q6IFwicG9kY2FzdGFkZGljdC5jb21cIixcbn07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BPRENBU1Q6IFBvZGNhc3QgPSB7XG4gIGRhdGU6IFwiXCIsXG4gIHRpdGxlOiBcIlRpdGxlIG5vdCBmb3VuZFwiLFxuICBkZXNjOiBcIkRlc2NyaXB0aW9uIG5vdCBmb3VuZFwiLFxuICBpbWFnZUxpbms6IFwiXCIsXG4gIHNob3dOb3RlczogXCJcIixcbiAgZXBpc29kZURhdGU6IFwiXCIsXG4gIHVybDogXCJcIixcbn07XG5cbmV4cG9ydCBlbnVtIE5vdGVDcmVhdGlvbk1ldGhvZCB7XG4gIE5ld05vdGUsXG4gIEFkZEF0Q3Vyc29yLFxufVxuIiwiaW1wb3J0IHsgREVGQVVMVF9QT0RDQVNULCBIT1NUUyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgTm90aWNlLCBtb21lbnQsIGh0bWxUb01hcmtkb3duLCByZXF1ZXN0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBQb2RjYXN0LCBQb2RjYXN0Tm90ZSwgUG9kY2FzdFRleHRVUkwgfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCBjbGFzcyBQb2RjYXN0UGFyc2VyIHtcbiAgdGVtcGxhdGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZTogc3RyaW5nKSB7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICB9XG5cbiAgYXN5bmMgcmVxdWVzdEhUTUwodXJsOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdCh7IHVybDogdXJsLCBtZXRob2Q6IFwiR0VUXCIgfSk7XG4gICAgICBsZXQgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgcmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcocmVzcG9uc2UsIFwidGV4dC9odG1sXCIpO1xuICAgIH0gY2F0Y2ggKHJlYXNvbikge1xuICAgICAgbmV3IE5vdGljZShcIkVycm9yIGxvYWRpbmcgcG9kY2FzdDogXCIgKyByZWFzb24pO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsb2FkRXBpc29kZVVVSUQodXJsOiBzdHJpbmcpIHtcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KHsgdXJsIH0pO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIHNhbml0aXplU3RyaW5nKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFwtfFxce3xcXH18OnwsfFxcW3xcXF18XFx8fFxcPnxcXDx8XFwjfFxcXCJ8XFwnXS9nLCBcIiBcIik7XG4gIH1cblxuICBzYW5pdGl6ZVBvZGNhc3QocG9kY2FzdDogUG9kY2FzdCkge1xuICAgIHBvZGNhc3QudGl0bGUgPSB0aGlzLnNhbml0aXplU3RyaW5nKHBvZGNhc3QudGl0bGUpO1xuICAgIHBvZGNhc3QuZGVzYyA9IHRoaXMuc2FuaXRpemVTdHJpbmcocG9kY2FzdC5kZXNjKTtcbiAgICBwb2RjYXN0LnNob3dOb3RlcyA9IHRoaXMuc2FuaXRpemVTdHJpbmcocG9kY2FzdC5zaG93Tm90ZXMpO1xuICAgIHJldHVybiBwb2RjYXN0O1xuICB9XG5cbiAgYXBwbHlUZW1wbGF0ZShwb2RjYXN0OiBQb2RjYXN0KTogUG9kY2FzdE5vdGUge1xuICAgIHBvZGNhc3QgPSB0aGlzLnNhbml0aXplUG9kY2FzdChwb2RjYXN0KTtcbiAgICBsZXQgY29udGVudCA9IHRoaXMudGVtcGxhdGVcbiAgICAgIC5yZXBsYWNlKC97e1RpdGxlfX0vZywgcG9kY2FzdC50aXRsZSlcbiAgICAgIC5yZXBsYWNlKC97e0ltYWdlVVJMfX0vZywgcG9kY2FzdC5pbWFnZUxpbmspXG4gICAgICAucmVwbGFjZSgve3tEZXNjcmlwdGlvbn19L2csIHBvZGNhc3QuZGVzYylcbiAgICAgIC5yZXBsYWNlKC97e0RhdGV9fS9nLCBwb2RjYXN0LmRhdGUpXG4gICAgICAucmVwbGFjZSgve3tUaW1lc3RhbXB9fS9nLCBEYXRlLm5vdygpLnRvU3RyaW5nKCkpXG4gICAgICAucmVwbGFjZSgve3tQb2RjYXN0VVJMfX0vZywgcG9kY2FzdC51cmwpXG4gICAgICAucmVwbGFjZSgve3tTaG93Tm90ZXN9fS9nLCBwb2RjYXN0LnNob3dOb3RlcylcbiAgICAgIC5yZXBsYWNlKC97e0VwaXNvZGVEYXRlfX0vZywgcG9kY2FzdC5lcGlzb2RlRGF0ZSk7XG4gICAgcmV0dXJuIHsgdGl0bGU6IHBvZGNhc3QudGl0bGUsIGNvbnRlbnQ6IGNvbnRlbnQgfTtcbiAgfVxuXG4gIG1ldGFPRyhyb290OiBEb2N1bWVudCwgYXR0cmlidXRlOiBzdHJpbmcsIG9nOiBzdHJpbmcpIHtcbiAgICBsZXQgdGl0bGVUYWcgPSByb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIm1ldGFbXCIgKyBhdHRyaWJ1dGUgKyBcIj0nb2c6XCIgKyBvZyArIFwiJ11cIlxuICAgICk7XG4gICAgaWYgKHRpdGxlVGFnKSB7XG4gICAgICBsZXQgdGl0bGUgPSB0aXRsZVRhZy5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpO1xuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBhc3luYyBsb2FkUG9kY2FzdChyb290OiBEb2N1bWVudCwgdXJsOiBzdHJpbmcpOiBQcm9taXNlPFBvZGNhc3Q+IHtcbiAgICBsZXQgcG9kY2FzdCA9IERFRkFVTFRfUE9EQ0FTVDtcbiAgICBwb2RjYXN0LnVybCA9IHVybDtcbiAgICBwb2RjYXN0LmRhdGUgPSBtb21lbnQoKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpO1xuXG4gICAgaWYgKHVybC5pbmNsdWRlcyhIT1NUUy5hcHBsZSkpIHtcbiAgICAgIHBvZGNhc3QudGl0bGUgPSB0aGlzLm1ldGFPRyhyb290LCBcInByb3BlcnR5XCIsIFwidGl0bGVcIik7XG4gICAgICBwb2RjYXN0LmRlc2MgPVxuICAgICAgICByb290LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZHVjdC1oZXJvLWRlc2NfX3NlY3Rpb25cIik/LnF1ZXJ5U2VsZWN0b3IoXCJwXCIpXG4gICAgICAgICAgPy5pbm5lckhUTUwgfHwgXCJcIjtcblxuICAgICAgbGV0IGFydHdvcmsgPSByb290LnF1ZXJ5U2VsZWN0b3IoXCIud2UtYXJ0d29ya19fc291cmNlXCIpO1xuICAgICAgcG9kY2FzdC5pbWFnZUxpbmsgPSBhcnR3b3JrPy5nZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIik/LnNwbGl0KFwiIFwiKVswXSB8fCBcIlwiO1xuICAgIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKEhPU1RTLmFpcnIpKSB7XG4gICAgICBwb2RjYXN0LnRpdGxlID0gdGhpcy5tZXRhT0cocm9vdCwgXCJwcm9wZXJ0eVwiLCBcInRpdGxlXCIpO1xuICAgICAgcG9kY2FzdC5kZXNjID0gdGhpcy5tZXRhT0cocm9vdCwgXCJuYW1lXCIsIFwiZGVzY3JpcHRpb25cIik7XG4gICAgICBwb2RjYXN0LmltYWdlTGluayA9IHRoaXMubWV0YU9HKHJvb3QsIFwicHJvcGVydHlcIiwgXCJpbWFnZVwiKTtcbiAgICB9IGVsc2UgaWYgKHVybC5pbmNsdWRlcyhIT1NUUy5vdmVyY2FzdCkpIHtcbiAgICAgIHBvZGNhc3QudGl0bGUgPSB0aGlzLm1ldGFPRyhyb290LCBcIm5hbWVcIiwgXCJ0aXRsZVwiKTtcbiAgICAgIHBvZGNhc3QuZGVzYyA9IHRoaXMubWV0YU9HKHJvb3QsIFwibmFtZVwiLCBcImRlc2NyaXB0aW9uXCIpO1xuICAgICAgcG9kY2FzdC5pbWFnZUxpbmsgPSB0aGlzLm1ldGFPRyhyb290LCBcIm5hbWVcIiwgXCJpbWFnZVwiKTtcbiAgICB9IGVsc2UgaWYgKHVybC5pbmNsdWRlcyhIT1NUUy55b3V0dWJlKSkge1xuICAgICAgcG9kY2FzdC50aXRsZSA9XG4gICAgICAgIHJvb3QucXVlcnlTZWxlY3RvcihcInRpdGxlXCIpPy5pbm5lckhUTUwgfHwgXCJUaXRsZSBub3QgZm91bmRcIjtcbiAgICAgIHBvZGNhc3QuZGVzYyA9XG4gICAgICAgIHJvb3RcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIiN3YXRjaDctY29udGVudCA+IG1ldGE6bnRoLWNoaWxkKDMpXCIpXG4gICAgICAgICAgPy5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpIHx8IFwiXCI7XG4gICAgICAvL2Rlc2MgPSByb290LnF1ZXJ5U2VsZWN0b3IoXCIueXRkLXZpZGVvLXNlY29uZGFyeS1pbmZvLXJlbmRlcmVyXCIpLmlubmVySFRNTDtcbiAgICAgIHBvZGNhc3QuaW1hZ2VMaW5rID0gdGhpcy5tZXRhT0cocm9vdCwgXCJwcm9wZXJ0eVwiLCBcImltYWdlXCIpO1xuICAgIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKEhPU1RTLnBvY2tldGNhc3RzKSkge1xuICAgICAgcG9kY2FzdC50aXRsZSA9IHRoaXMubWV0YU9HKHJvb3QsIFwicHJvcGVydHlcIiwgXCJ0aXRsZVwiKTtcbiAgICAgIGxldCBzY3JpcHQgPSByb290LnF1ZXJ5U2VsZWN0b3IoXCJib2R5ID4gc2NyaXB0XCIpO1xuICAgICAgaWYgKHNjcmlwdCkge1xuICAgICAgICBsZXQgc2NyaXB0SHRtbCA9IHNjcmlwdC5pbm5lckhUTUw7XG4gICAgICAgIGxldCByZWdleCA9IC9FUElTT0RFX1VVSUQgPSAnKC4qKScvZ207XG4gICAgICAgIGxldCB1dWlkID0gcmVnZXguZXhlYyhzY3JpcHRIdG1sKTtcbiAgICAgICAgaWYgKHV1aWQpIHtcbiAgICAgICAgICBsZXQganNvbl9ub3RlcyA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRFcGlzb2RlVVVJRChcbiAgICAgICAgICAgICAgXCJodHRwczovL2NhY2hlLnBvY2tldGNhc3RzLmNvbS9zaGFyZS9lcGlzb2RlL3Nob3dfbm90ZXMvXCIgK1xuICAgICAgICAgICAgICAgIHV1aWRbMV1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApW1wic2hvd19ub3Rlc1wiXTtcbiAgICAgICAgICBwb2RjYXN0LnNob3dOb3RlcyA9IGh0bWxUb01hcmtkb3duKGpzb25fbm90ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBvZGNhc3QuZGVzYyA9IHRoaXMubWV0YU9HKHJvb3QsIFwicHJvcGVydHlcIiwgXCJkZXNjcmlwdGlvblwiKTtcbiAgICAgIGxldCBlcGlzb2RlRGF0ZUhUTUwgPSByb290LnF1ZXJ5U2VsZWN0b3IoXCIjZXBpc29kZV9kYXRlXCIpO1xuICAgICAgaWYgKGVwaXNvZGVEYXRlSFRNTCkge1xuICAgICAgICBwb2RjYXN0LmVwaXNvZGVEYXRlID0gZXBpc29kZURhdGVIVE1MLmlubmVySFRNTDtcbiAgICAgIH1cbiAgICAgIHBvZGNhc3QuaW1hZ2VMaW5rID0gdGhpcy5tZXRhT0cocm9vdCwgXCJwcm9wZXJ0eVwiLCBcImltYWdlXCIpO1xuICAgIH0gZWxzZSBpZiAodXJsLmluY2x1ZGVzKEhPU1RTLmNhc3RybykpIHtcbiAgICAgIHBvZGNhc3QudGl0bGUgPSB0aGlzLm1ldGFPRyhyb290LCBcInByb3BlcnR5XCIsIFwidGl0bGVcIik7XG4gICAgICBwb2RjYXN0LmRlc2MgPSB0aGlzLm1ldGFPRyhyb290LCBcInByb3BlcnR5XCIsIFwiZGVzY3JpcHRpb25cIik7XG4gICAgICBwb2RjYXN0LmltYWdlTGluayA9IHRoaXMubWV0YU9HKHJvb3QsIFwicHJvcGVydHlcIiwgXCJpbWFnZVwiKTtcbiAgICAgIHBvZGNhc3Quc2hvd05vdGVzID0gaHRtbFRvTWFya2Rvd24oXG4gICAgICAgIHJvb3QucXVlcnlTZWxlY3RvcihcIi5jby1zdXBlcnRvcC1jYXN0cm8tc2hvdy1ub3Rlc1wiKT8uaW5uZXJIVE1MIHx8IFwiXCJcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh1cmwuaW5jbHVkZXMoSE9TVFMuYWRkaWN0KSkge1xuICAgICAgcG9kY2FzdC50aXRsZSA9IHRoaXMubWV0YU9HKHJvb3QsIFwicHJvcGVydHlcIiwgXCJ0aXRsZVwiKTtcbiAgICAgIHBvZGNhc3QuZGVzYyA9IHRoaXMubWV0YU9HKHJvb3QsIFwicHJvcGVydHlcIiwgXCJkZXNjcmlwdGlvblwiKTtcbiAgICAgIHBvZGNhc3QuaW1hZ2VMaW5rID0gdGhpcy5tZXRhT0cocm9vdCwgXCJwcm9wZXJ0eVwiLCBcImltYWdlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2RjYXN0LnRpdGxlID0gdGhpcy5tZXRhT0cocm9vdCwgXCJwcm9wZXJ0eVwiLCBcInRpdGxlXCIpO1xuICAgICAgcG9kY2FzdC5kZXNjID0gdGhpcy5tZXRhT0cocm9vdCwgXCJwcm9wZXJ0eVwiLCBcImRlc2NyaXB0aW9uXCIpO1xuICAgICAgcG9kY2FzdC5pbWFnZUxpbmsgPSB0aGlzLm1ldGFPRyhyb290LCBcInByb3BlcnR5XCIsIFwiaW1hZ2VcIik7XG4gICAgfVxuXG4gICAgLy8gT2JzaWRpYW4gbW9iaWxlIGNhbiBvbmx5IHRyYW5zY2x1ZGUgaW1hZ2VzIHdpdGggaHR0cHMgdXJsc1xuICAgIGlmICghcG9kY2FzdC5pbWFnZUxpbmsuc3RhcnRzV2l0aChcImh0dHBzXCIpKSB7XG4gICAgICBwb2RjYXN0LmltYWdlTGluayA9IHBvZGNhc3QuaW1hZ2VMaW5rLnJlcGxhY2UoXCJodHRwXCIsIFwiaHR0cHNcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvZGNhc3Q7XG4gIH1cblxuICBhc3luYyBnZXRQb2RjYXN0Tm90ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8UG9kY2FzdE5vdGU+IHtcbiAgICBsZXQgcm9vdCA9IGF3YWl0IHRoaXMucmVxdWVzdEhUTUwodXJsKTtcblxuICAgIGlmIChyb290KSB7XG4gICAgICBsZXQgcG9kY2FzdCA9IGF3YWl0IHRoaXMubG9hZFBvZGNhc3Qocm9vdCwgdXJsKTtcbiAgICAgIGxldCBwb2RjYXN0Tm90ZSA9IHRoaXMuYXBwbHlUZW1wbGF0ZShwb2RjYXN0KTtcbiAgICAgIHJldHVybiBwb2RjYXN0Tm90ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHsgdGl0bGU6IFwiXCIsIGNvbnRlbnQ6IFwiXCIgfTtcbiAgICB9XG4gIH1cblxuICBpc1BvZGNhc3RVUkxTdXBwb3J0ZWQodXJsOiBzdHJpbmcpIHtcbiAgICBpZiAobmV3IFJlZ0V4cChPYmplY3QudmFsdWVzKEhPU1RTKS5qb2luKFwifFwiKSkudGVzdCh1cmwpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IE5vdGljZShcIlRoaXMgcG9kY2FzdCBzZXJ2aWNlIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdldFBvZGNhc3RVUkxzRnJvbVNlbGVjdGlvbihzZWxlY3Rpb246IHN0cmluZyk6IFBvZGNhc3RUZXh0VVJMW10ge1xuICAgIGxldCByZWcgPSAvXFxbKFteXFxdXSopXFxdXFwoKFteXFwpXSspXFwpL2c7XG4gICAgbGV0IG07XG4gICAgbGV0IHBvZGNhc3RzOiBQb2RjYXN0VGV4dFVSTFtdID0gW107XG5cbiAgICAvLyBTZWFyY2ggZm9yIG1hcmtkb3duIGxpbmtzXG4gICAgd2hpbGUgKChtID0gcmVnLmV4ZWMoc2VsZWN0aW9uKSkgIT09IG51bGwpIHtcbiAgICAgIGxldCB1cmwgPSBtWzJdO1xuICAgICAgbGV0IGxpbmtUaXRsZSA9IG1bMV07XG4gICAgICBwb2RjYXN0cy5wdXNoKHsgdXJsOiB1cmwsIGFsaWFzOiBcInxcIiArIGxpbmtUaXRsZSwgbWFya2Rvd246IG1bMF0gfSk7XG4gICAgfVxuXG4gICAgLy8gU2VhcmNoIGZvciBwdXJlIGxpbmtzXG4gICAgbGV0IHdvcmRzID0gc2VsZWN0aW9uLnNwbGl0KC9bXFxyXFxufFxcbnxcXHJ8XFxzXS8pO1xuICAgIGNvbnNvbGUubG9nKHdvcmRzKTtcbiAgICB3b3Jkcy5mb3JFYWNoKCh3b3JkKSA9PiB7XG4gICAgICBpZiAod29yZC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIikpIHtcbiAgICAgICAgcG9kY2FzdHMucHVzaCh7IHVybDogd29yZCwgYWxpYXM6IFwiXCIsIG1hcmtkb3duOiB3b3JkIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBvZGNhc3RzO1xuICB9XG5cbiAgZ2V0UG9kY2FzdHNGcm9tU2VsZWN0aW9uKHNlbGVjdGlvbjogc3RyaW5nKTogUG9kY2FzdE5vdGVbXSB7XG4gICAgbGV0IHBvZGNhc3RzOiBQb2RjYXN0Tm90ZVtdID0gW107XG4gICAgbGV0IHVybHMgPSB0aGlzLmdldFBvZGNhc3RVUkxzRnJvbVNlbGVjdGlvbihzZWxlY3Rpb24pO1xuXG4gICAgdXJscy5mb3JFYWNoKGFzeW5jICh1cmwpID0+IHtcbiAgICAgIHBvZGNhc3RzLnB1c2goYXdhaXQgdGhpcy5nZXRQb2RjYXN0Tm90ZSh1cmwudXJsKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcG9kY2FzdHM7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVkaXRvciwgTm90aWNlLCBtb21lbnQsIEFwcCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgUG9kY2FzdE5vdGUgfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCBjbGFzcyBOb3RlQ3JlYXRvciB7XG4gIGFwcDogQXBwO1xuICBmaWxlbmFtZVRlbXBsYXRlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGZpbGVuYW1lVGVtcGxhdGU6IHN0cmluZykge1xuICAgIHRoaXMuYXBwID0gYXBwO1xuICAgIHRoaXMuZmlsZW5hbWVUZW1wbGF0ZSA9IGZpbGVuYW1lVGVtcGxhdGU7XG4gIH1cblxuICBhZGRQb2RjYXN0QXRDdXJzb3IocG9kY2FzdDogUG9kY2FzdE5vdGUsIGVkaXRvcjogRWRpdG9yKSB7XG4gICAgbGV0IGN1cnJlbnRMaW5lID0gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UocG9kY2FzdC5jb250ZW50LCBjdXJyZW50TGluZSwgY3VycmVudExpbmUpO1xuICB9XG5cbiAgYXBwbHlGaWxlTmFtZVRlbXBsYXRlKHBvZGNhc3Q6IFBvZGNhc3ROb3RlKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZW5hbWVUZW1wbGF0ZVxuICAgICAgLnJlcGxhY2UoL3t7VGl0bGV9fS9nLCBwb2RjYXN0LnRpdGxlKVxuICAgICAgLnJlcGxhY2UoL3t7VGltZXN0YW1wfX0vZywgRGF0ZS5ub3coKS50b1N0cmluZygpKVxuICAgICAgLnJlcGxhY2UoL3t7RGF0ZX19L2csIG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tRERcIikpXG4gICAgICAucmVwbGFjZSgvW1xcXFwvOlwiKj88PnxdKi9nLCBcIlwiKTtcbiAgfVxuXG4gIGNyZWF0ZVBvZGNhc3ROb3RlKHBvZGNhc3Q6IFBvZGNhc3ROb3RlLCBmb2xkZXI6IHN0cmluZykge1xuICAgIGxldCBmaWxlTmFtZSA9IHRoaXMuYXBwbHlGaWxlTmFtZVRlbXBsYXRlKHBvZGNhc3QpO1xuXG4gICAgdGhpcy5hcHAudmF1bHQuY3JlYXRlKGZvbGRlciArIFwiL1wiICsgZmlsZU5hbWUgKyBcIi5tZFwiLCBwb2RjYXN0LmNvbnRlbnQpO1xuICAgIHJldHVybiBmaWxlTmFtZTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQXBwLFxuICBNYXJrZG93blZpZXcsXG4gIE1vZGFsLFxuICBOb3RpY2UsXG4gIFBsdWdpbixcbiAgUGx1Z2luU2V0dGluZ1RhYixcbiAgU2V0dGluZyxcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmltcG9ydCB7IFBvZGNhc3ROb3RlU2V0dGluZ3MgfSBmcm9tIFwiLi9zcmMvaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUywgTm90ZUNyZWF0aW9uTWV0aG9kIH0gZnJvbSBcIi4vc3JjL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgUG9kY2FzdFBhcnNlciB9IGZyb20gXCIuL3NyYy9Qb2RjYXN0UGFyc2VyXCI7XG5pbXBvcnQgeyBOb3RlQ3JlYXRvciB9IGZyb20gXCIuL3NyYy9Ob3RlQ3JlYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2RjYXN0Tm90ZSBleHRlbmRzIFBsdWdpbiB7XG4gIHNldHRpbmdzOiBQb2RjYXN0Tm90ZVNldHRpbmdzO1xuXG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgcGx1Z2luIFBvZGNhc3ROb3RlXCIpO1xuICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFBvZGNhc3ROb3RlU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcImFkZC1wb2RjYXN0LW5vdGVcIixcbiAgICAgIG5hbWU6IFwiQWRkIFBvZGNhc3QgTm90ZVwiLFxuXG4gICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgbGV0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcbiAgICAgICAgaWYgKGxlYWYpIHtcbiAgICAgICAgICBpZiAoIWNoZWNraW5nKSB7XG4gICAgICAgICAgICBuZXcgUG9kY2FzdE5vdGVNb2RhbCh0aGlzLmFwcCwgdGhpcykub3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcImFkZC1wb2RjYXN0LW5vdGVzLWZyb20tc2VsZWN0aW9uXCIsXG4gICAgICBuYW1lOiBcIkFkZCBQb2RjYXN0IE5vdGVzIGZyb20gc2VsZWN0aW9uXCIsXG5cbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuY3JlYXRlUG9kY2FzdE5vdGVzRnJvbVNlbGVjdGlvbigpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG9udW5sb2FkKCkge1xuICAgIGNvbnNvbGUubG9nKFwidW5sb2FkaW5nIHBsdWdpbiBQb2RjYXN0Tm90ZVwiKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICB9XG5cbiAgZ2V0RWRpdG9yKCkge1xuICAgIGxldCBtZFZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuICAgIGlmIChtZFZpZXcpIHtcbiAgICAgIHJldHVybiBtZFZpZXcuZWRpdG9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFRlbXBsYXRlKCkge1xuICAgIGlmICh0aGlzLnNldHRpbmdzLnRlbXBsYXRlUGF0aCAhPSBcIlwiKSB7XG4gICAgICBsZXQgcGF0aCA9IHRoaXMuc2V0dGluZ3MudGVtcGxhdGVQYXRoO1xuICAgICAgaWYgKCFwYXRoLmVuZHNXaXRoKFwiLm1kXCIpKSB7XG4gICAgICAgIHBhdGggKz0gXCIubWRcIjtcbiAgICAgIH1cbiAgICAgIGxldCBmaWxlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChwYXRoLCBcIlwiKTtcbiAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wb2RjYXN0VGVtcGxhdGU7XG4gIH1cblxuICBhc3luYyBuZXdQb2RjYXN0Tm90ZSh1cmw6IHN0cmluZywgbWV0aG9kOiBOb3RlQ3JlYXRpb25NZXRob2QpIHtcbiAgICBsZXQgdGVtcGxhdGUgPSBhd2FpdCB0aGlzLmdldFRlbXBsYXRlKCk7XG4gICAgbGV0IHBhcnNlciA9IG5ldyBQb2RjYXN0UGFyc2VyKHRlbXBsYXRlKTtcblxuICAgIG5ldyBOb3RpY2UoXCJMb2FkaW5nIFBvZGNhc3QgSW5mb1wiKTtcblxuICAgIGlmIChwYXJzZXIuaXNQb2RjYXN0VVJMU3VwcG9ydGVkKHVybCkpIHtcbiAgICAgIGxldCBwb2RjYXN0Tm90ZSA9IGF3YWl0IHBhcnNlci5nZXRQb2RjYXN0Tm90ZSh1cmwpO1xuXG4gICAgICBsZXQgbmMgPSBuZXcgTm90ZUNyZWF0b3IodGhpcy5hcHAsIHRoaXMuc2V0dGluZ3MuZmlsZU5hbWUpO1xuXG4gICAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICBjYXNlIE5vdGVDcmVhdGlvbk1ldGhvZC5OZXdOb3RlOlxuICAgICAgICAgIG5jLmNyZWF0ZVBvZGNhc3ROb3RlKHBvZGNhc3ROb3RlLCB0aGlzLnNldHRpbmdzLmZvbGRlcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm90ZUNyZWF0aW9uTWV0aG9kLkFkZEF0Q3Vyc29yOlxuICAgICAgICAgIGxldCBlZGl0b3IgPSB0aGlzLmdldEVkaXRvcigpO1xuICAgICAgICAgIGlmIChlZGl0b3IpIHtcbiAgICAgICAgICAgIG5jLmFkZFBvZGNhc3RBdEN1cnNvcihwb2RjYXN0Tm90ZSwgZWRpdG9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIllvdSBoYXZlIHRvIGJlIGluIHRoZSBlZGl0b3IgdG8gZG8gdGhpcy5cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVBvZGNhc3ROb3Rlc0Zyb21TZWxlY3Rpb24oKSB7XG4gICAgbGV0IHRlbXBsYXRlID0gYXdhaXQgdGhpcy5nZXRUZW1wbGF0ZSgpO1xuICAgIGxldCBlZGl0b3IgPSB0aGlzLmdldEVkaXRvcigpO1xuICAgIGxldCBwYXJzZXIgPSBuZXcgUG9kY2FzdFBhcnNlcih0ZW1wbGF0ZSk7XG5cbiAgICBuZXcgTm90aWNlKFwiTG9hZGluZyBQb2RjYXN0IEluZm9cIik7XG5cbiAgICBpZiAoZWRpdG9yKSB7XG4gICAgICBsZXQgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgICAgbGV0IGxpbmtzID0gYXdhaXQgcGFyc2VyLmdldFBvZGNhc3RVUkxzRnJvbVNlbGVjdGlvbihzZWxlY3Rpb24pO1xuICAgICAgbGV0IG5jID0gbmV3IE5vdGVDcmVhdG9yKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLmZpbGVOYW1lKTtcblxuICAgICAgZm9yIChsZXQgbGluayBvZiBsaW5rcykge1xuICAgICAgICBpZiAocGFyc2VyLmlzUG9kY2FzdFVSTFN1cHBvcnRlZChsaW5rLnVybCkpIHtcbiAgICAgICAgICBsZXQgcG9kY2FzdE5vdGUgPSBhd2FpdCBwYXJzZXIuZ2V0UG9kY2FzdE5vdGUobGluay51cmwpO1xuICAgICAgICAgIGxldCBmaWxlbmFtZSA9IG5jLmNyZWF0ZVBvZGNhc3ROb3RlKFxuICAgICAgICAgICAgcG9kY2FzdE5vdGUsXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmZvbGRlclxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24ucmVwbGFjZShcbiAgICAgICAgICAgIGxpbmsubWFya2Rvd24sXG4gICAgICAgICAgICBcIltbXCIgKyBmaWxlbmFtZSArIGxpbmsuYWxpYXMgKyBcIl1dXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihzZWxlY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgTm90aWNlKFwiWW91IGhhdmUgdG8gYmUgaW4gdGhlIGVkaXRvciB0byBkbyB0aGlzLlwiKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgUG9kY2FzdE5vdGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgcGx1Z2luOiBQb2RjYXN0Tm90ZTtcblxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBQb2RjYXN0Tm90ZSkge1xuICAgIHN1cGVyKGFwcCk7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBvbk9wZW4oKSB7XG4gICAgbGV0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgzXCIsIHsgdGV4dDogXCJFbnRlciBwb2RjYXN0IFVSTDpcIiB9KTtcbiAgICBsZXQgaW5wdXQgPSBjb250ZW50RWwuY3JlYXRlRWwoXCJpbnB1dFwiLCB7IHR5cGU6IFwidGV4dFwiIH0pO1xuICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImJyXCIpO1xuICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImJyXCIpO1xuICAgIGxldCBidXR0b24gPSBjb250ZW50RWwuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIkFkZCBQb2RjYXN0IE5vdGVcIiB9KTtcblxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgbGV0IHVybCA9IGlucHV0LnZhbHVlO1xuICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmF0Q3Vyc29yKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLm5ld1BvZGNhc3ROb3RlKHVybCwgTm90ZUNyZWF0aW9uTWV0aG9kLkFkZEF0Q3Vyc29yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGx1Z2luLm5ld1BvZGNhc3ROb3RlKHVybCwgTm90ZUNyZWF0aW9uTWV0aG9kLk5ld05vdGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgb25DbG9zZSgpIHtcbiAgICBsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgY29udGVudEVsLmVtcHR5KCk7XG4gIH1cbn1cblxuY2xhc3MgUG9kY2FzdE5vdGVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gIHBsdWdpbjogUG9kY2FzdE5vdGU7XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogUG9kY2FzdE5vdGUpIHtcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBkaXNwbGF5KCk6IHZvaWQge1xuICAgIGxldCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiU2V0dGluZ3MgZm9yIFBvZGNhc3QgTm90ZVwiIH0pO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZShcIlRlbXBsYXRlXCIpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgXCJEZWZpbmUgeW91ciBvd24gdGVtcGxhdGUuIEF2YWlsYWJsZSBwbGFjZWhvbGRlcnMgYXJlOiB7e1RpdGxlfX0sIHt7SW1hZ2VVUkx9fSwge3tEZXNjcmlwdGlvbn19LCB7e1Nob3dOb3Rlc319LCB7e0VwaXNvZGVEYXRlfX0sIHt7UG9kY2FzdFVSTH19LCB7e0RhdGV9fSwge3tUaW1lc3RhbXB9fVwiXG4gICAgICApXG4gICAgICAuYWRkVGV4dEFyZWEoKHRleHRhcmVhKSA9PiB7XG4gICAgICAgIHRleHRhcmVhXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBvZGNhc3RUZW1wbGF0ZSlcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucG9kY2FzdFRlbXBsYXRlID0gdGV4dGFyZWEuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB0ZXh0YXJlYS5pbnB1dEVsLnJvd3MgPSAxMDtcbiAgICAgICAgdGV4dGFyZWEuaW5wdXRFbC5jb2xzID0gMzU7XG4gICAgICB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoXCJUZW1wbGF0ZSBGaWxlXCIpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgXCJEZWZpbmUgeW91ciBvd24gdGVtcGxhdGUgaW4gYSAubWQgZmlsZS4gRW50ZXIgdGhlIHBhdGggaGVyZSAocmVsYXRpdmUgdG8gdmF1bHQpXCJcbiAgICAgIClcbiAgICAgIC5hZGRUZXh0QXJlYSgodGV4dGFyZWEpID0+XG4gICAgICAgIHRleHRhcmVhXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlUGF0aClcbiAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJwYXRoL3RvL3RlbXBsYXRlXCIpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlUGF0aCA9IHRleHRhcmVhLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoXCJGb2xkZXJcIilcbiAgICAgIC5zZXREZXNjKFwiTmV3IFBvZGNhc3QgTm90ZXMgd2lsbCBiZSBzYXZlZCBoZXJlIChkZWZhdWx0OiBWYXVsdCBmb2xkZXIpXCIpXG4gICAgICAuYWRkVGV4dEFyZWEoKHRleHRhcmVhKSA9PlxuICAgICAgICB0ZXh0YXJlYVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXIpXG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiZXhhbXBsZTogUG9kY2FzdHNcIilcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyID0gdGV4dGFyZWEuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZShcIkZpbGVuYW1lIHRlbXBsYXRlXCIpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgJ0ZpbGVuYW1lIHRlbXBsYXRlIHdoZW4gXCJOZXcgbm90ZVwiIGlzIHNlbGVjdGVkLiBBdmFpbGFibGUgcGxhY2Vob2xkZXJzIGFyZSB7e1RpdGxlfX0sIHt7VGltZXN0YW1wfX0sIHt7RGF0ZX19J1xuICAgICAgKVxuICAgICAgLmFkZFRleHRBcmVhKCh0ZXh0YXJlYSkgPT5cbiAgICAgICAgdGV4dGFyZWEuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlsZU5hbWUpLm9uQ2hhbmdlKGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWxlTmFtZSA9IHRleHRhcmVhLmdldFZhbHVlKCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZShcIkluc2VydCBhdCBjdXJzb3JcIilcbiAgICAgIC5zZXREZXNjKFwiSW5zZXJ0IHBvZGNhc3Qgbm90ZSBhdCBjdXJzb3IgKGRlZmF1bHQ6IGNyZWF0ZSBuZXcgbm90ZSlcIilcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cbiAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmF0Q3Vyc29yKS5vbkNoYW5nZShhc3luYyAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXRDdXJzb3IgPSB0b2dnbGUuZ2V0VmFsdWUoKTtcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImhyXCIpO1xuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7IHRleHQ6IFwiU3VwcG9ydGVkIHBvZGNhc3Qgc2VydmljZXM6XCIgfSk7XG4gICAgbGV0IHVsID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJ1bFwiKTtcbiAgICB1bC5jcmVhdGVFbChcImxpXCIsIHsgdGV4dDogXCJBcHBsZVwiIH0pO1xuICAgIHVsLmNyZWF0ZUVsKFwibGlcIiwgeyB0ZXh0OiBcIlNwb3RpZnlcIiB9KTtcbiAgICB1bC5jcmVhdGVFbChcImxpXCIsIHsgdGV4dDogXCJHb29nbGVcIiB9KTtcbiAgICB1bC5jcmVhdGVFbChcImxpXCIsIHsgdGV4dDogXCJQb2NrZXQgQ2FzdHNcIiB9KTtcbiAgICB1bC5jcmVhdGVFbChcImxpXCIsIHsgdGV4dDogXCJBaXJyXCIgfSk7XG4gICAgdWwuY3JlYXRlRWwoXCJsaVwiLCB7IHRleHQ6IFwiT3ZlcmNhc3RcIiB9KTtcbiAgICB1bC5jcmVhdGVFbChcImxpXCIsIHsgdGV4dDogXCJDYXN0cm9cIiB9KTtcbiAgICB1bC5jcmVhdGVFbChcImxpXCIsIHsgdGV4dDogXCJQb2RjYXN0IEFkZGljdFwiIH0pO1xuICAgIHVsLmNyZWF0ZUVsKFwibGlcIiwgeyB0ZXh0OiBcIllvdVR1YmVcIiB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInJlcXVlc3QiLCJOb3RpY2UiLCJtb21lbnQiLCJodG1sVG9NYXJrZG93biIsIk1hcmtkb3duVmlldyIsIlBsdWdpbiIsIk1vZGFsIiwiU2V0dGluZyIsIlBsdWdpblNldHRpbmdUYWIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ25DLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0FBQ3pDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNwRixRQUFRLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUMxRyxJQUFJLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUM7QUFDRjtBQUNPLFNBQVMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDaEMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEtBQUssSUFBSTtBQUM3QyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLCtCQUErQixDQUFDLENBQUM7QUFDbEcsSUFBSSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0FBQzNDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6RixDQUFDO0FBdUNEO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtBQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RSxLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7QUFDRDtBQUNPLFNBQVMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7QUFDM0MsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JILElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sTUFBTSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0osSUFBSSxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN0RSxJQUFJLFNBQVMsSUFBSSxDQUFDLEVBQUUsRUFBRTtBQUN0QixRQUFRLElBQUksQ0FBQyxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUN0RSxRQUFRLE9BQU8sQ0FBQyxFQUFFLElBQUk7QUFDdEIsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FB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RUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7S0FDeEM7SUFDSCw0QkFBQztBQUFELENBNUZBLENBQW9DQyx5QkFBZ0I7Ozs7In0=
