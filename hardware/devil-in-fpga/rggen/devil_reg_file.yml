register_blocks:
  - name: devil_register_file
    byte_size: 256
    comment: |
        devil-in-fpga register file.

    registers:
################################################################
    - name: control
      comment: |
        Controls the functions of the IP.
      bit_fields:
      - <<:
        - { name:  EN, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Enable the IP
            0: Disables 
            1: Enables 
      - <<:
        - { name:  TEST, bit_assignment:  { width: 4 }, type: rw  ,  initial_value: 0}
        - comment: |
            Chooses the type of tests to be performed
            0b0000: Fuzzing. Combination of several test inputs
            0b0001: Reply with Delay crvalid
            0b0010: Reply with Delay cdvalid
            0b0011: Reply with Delay cdlast
            0bxxxx: Reserved
      - <<:
        - { name:  FUNC, bit_assignment:  { width: 4 }, type: rw  ,  initial_value: 0}
        - comment: |
            Chooses the functions of the IP
            0b0000: One-Shot Delay. The IP just delyas one time the snoop response. The delay is defined by DELAY reg value.
            0b0001: Continuous Delay. The IP is constantly delaying the snoop requests while the CONEN bit is active.
            0b0010: **A**ctive **D**ata **L**eak. The IP issues a snoop request to read an address when the ADLEN bit is active 
            0b0011: **A**ctive **D**ata **T**ampering. The IP issues a snoop request to write to an address when the ADTEN bit is active
            0b0100: **P**assive **D**ata **T**ampering. The IP responds to a snoop requests with wrong data while the PDTEN bit is active 
            0bxxxx: Reserved
      - <<:
        - { name:  CRRESP, bit_assignment:  { width: 5 }, type: rw  ,  initial_value: 0}
        - comment: |
            The response the IP will send to a snoop request.
      - <<:
        - { name:  ACFLT, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Snoop Request Filter
            0: Disables snoop resquest filter
            1: Enables snoop resquest filter 
      - <<:
        - { name:  ADDRFLT, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Address Filter.
            0: Disables address filter
            1: Enables address filter
      - <<:
        - { name:  OSHEN, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Enable or disable the one shot delay of the snoop response
            0: Disables one shot delay 
            1: Enables one shot delay 
      - <<:
        - { name:  CONEN, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Enable or disable the continuous delay of the snoop response
            0: Disables continuous delay
            1: Enables continuous delay
      - <<:
        - { name:  ADLEN, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Enable or disable the **A**ctive **D**ata **L**eak
            0: Disables Active Data Leak
            1: Enables Active Data Leak
      - <<:
        - { name:  ADTEN, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Enable or disable the **A**ctive **D**ata **T**ampering
            0: Disables Active Data Tampering
            1: Enables Active Data Tampering
      - <<:
        - { name:  PDTEN, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Enable or disable the **P**assive **D**ata **T**ampering
            0: Disables Passive Data Tampering
            1: Enables Passive Data Tampering
      - <<:
        - { name:  MONEN, bit_assignment:  { width: 1 }, type: rw  ,  initial_value: 0}
        - comment: |
            Enable or disable the **Mon**itoring Transactions
            0: Disables Transactions' Monitoring
            1: Enables Transactions' Monitoring
      - <<:
        - { name:  Res, bit_assignment:  { width: 10 }, type: reserved}

################################################################           
    - name: status
      comment: |
        Status of the IP.
      bit_fields:
      - <<:
        - { name:  OSH_END, bit_assignment:  { width: 1 }, type: [custom, sw_write: clear_1, hw_set: true ], initial_value: 0}
        - comment: |
            The One-Shot delay has been applied to one snoop. Cleared by SW (writing 1).
            0: No delay has been applied
            1: Delay has been applied to one snoop request
      - <<:
        - { name:  BUSY, bit_assignment:  { width: 1 }, type: [custom, sw_write: none, hw_set: true, hw_clear: true ],  initial_value: 0}
        - comment: |
            The devil is busy doing a reply.
            0: Not busy
            1: Busy doing a reply
      - <<:
        - {name: Res, bit_assignment:  { width: 30 }, type: reserved}

################################################################
    - name: delay
      comment: |
        Sets the delay to reply to CCI snoop requests.
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: acsnoop
      comment: |
        Snoop request filter. When active, in Ctrl Reg, the IP will only reply to the selected AC.
      bit_fields:
      - <<:
        - { name:  type, bit_assignment:  { width: 4 }, type: rw  ,  initial_value: 0}
        - comment: |
            0bxxxx: Acsnoop x
      - { name:  Res, bit_assignment:  { width: 28 }, type: reserved} 

################################################################
    - name: base_addr
      comment: |
        Address filter, base address.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: mem_size
      comment: |
        Address filter, size of the memory region to filter.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: arsnoop
      comment: |
        Define the type of read snoop.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: l_araddr
      comment: |
        Low 32 bits of ARADDR.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: h_araddr
      comment: |
        High 8 bits of ARADDR. The remaining bits are ignored.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: awsnoop
      comment: |
        Define the type of write snoop.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: l_awaddr
      comment: |
        Low 32 bits of AWADDR.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
    - name: h_awaddr
      comment: |
        High 8 bits of AWADDR. The remaining bits are ignored.
      bit_fields:
      - { name:  Data, bit_assignment:  { width: 32 }, type: rw  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_0
      comment: |
        Word X of the read cache line
      offset_address: 0x40
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_0
      comment: |
        Word X of the write cache line
      offset_address: 0x40
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_1
      comment: |
        Word X of the read cache line
      offset_address: 0x44
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_1
      comment: |
        Word X of the write cache line
      offset_address: 0x44
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_2
      comment: |
        Word X of the read cache line
      offset_address: 0x48
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_2
      comment: |
        Word X of the write cache line
      offset_address: 0x48
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_3
      comment: |
        Word X of the read cache line
      offset_address: 0x4C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_3
      comment: |
        Word X of the write cache line
      offset_address: 0x4C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_4
      comment: |
        Word X of the read cache line
      offset_address: 0x50
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_4
      comment: |
        Word X of the write cache line
      offset_address: 0x50
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_5
      comment: |
        Word X of the read cache line
      offset_address: 0x54
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_5
      comment: |
        Word X of the write cache line
      offset_address: 0x54
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_6
      comment: |
        Word X of the read cache line.
      offset_address: 0x58
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_6
      comment: |
        Word X of the write cache line
      offset_address: 0x58
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_7
      comment: |
        Word X of the read cache line
      offset_address: 0x5C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_7
      comment: |
        Word X of the write cache line
      offset_address: 0x5C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_8
      comment: |
        Word X of the read cache line
      offset_address: 0x60
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_8
      comment: |
        Word X of the write cache line
      offset_address: 0x60
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_9
      comment: |
        Word X of the read cache line
      offset_address: 0x64
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_9
      comment: |
        Word X of the write cache line
      offset_address: 0x64
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_10
      comment: |
        Word X of the read cache line
      offset_address: 0x68
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_10
      comment: |
        Word X of the write cache line
      offset_address: 0x68
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_11
      comment: |
        Word X of the read cache line
      offset_address: 0x6C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_11
      comment: |
        Word X of the write cache line
      offset_address: 0x6C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_12
      comment: |
        Word X of the read cache line
      offset_address: 0x70
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_12
      comment: |
        Word X of the write cache line
      offset_address: 0x70
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_13
      comment: |
        Word X of the read cache line
      offset_address: 0x74
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_13
      comment: |
        Word X of the write cache line
      offset_address: 0x74
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_14
      comment: |
        Word X of the read cache line
      offset_address: 0x78
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_14
      comment: |
        Word X of the write cache line
      offset_address: 0x78
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

################################################################
# rdata_x and wdata_x are the same register, but with different
# bit types. rdata_x register is read only and the wdata_x 
# register is write only. So we can use the same address for both
# registers. This is a rggen feature
################################################################
    - name: rdata_15
      comment: |
        Word X of the read cache line
      offset_address: 0x7C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: ro  ,  initial_value: 0}

################################################################
    - name: wdata_15
      comment: |
        Word X of the write cache line
      offset_address: 0x7C
      bit_fields:
      - { name: data, bit_assignment:  { width: 32 }, type: wo  ,  initial_value: 0}

    # - name: register_2
    #   offset_address: 0x08
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 4 }, type: ro }
    #   - { name: bit_field_1, bit_assignment: { lsb:  8, width: 8 }, type: rof, initial_value: 0xab }
    #   - { name: bit_field_2, bit_assignment: { lsb: 16, width: 4 }, type: rol, initial_value: 0    }
    #   - { name: bit_field_3, bit_assignment: { lsb: 20, width: 4 }, type: rol, initial_value: 0, reference: register_3.bit_field_3 }
    #   - { name: bit_field_4, bit_assignment: { lsb: 24, width: 8 }, type: reserved }

    # - name: register_3
    #   offset_address: 0x08
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 4 }, type: wo , initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb:  4, width: 4 }, type: wo1, initial_value: 0 }
    #   - { name: bit_field_2, bit_assignment: { lsb:  8, width: 4 }, type: w0trg }
    #   - { name: bit_field_3, bit_assignment: { lsb: 16, width: 4 }, type: w1trg }

    # - name: register_4
    #   offset_address: 0x0C
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 4 }, type: rc, initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb:  8, width: 4 }, type: rc, initial_value: 0, }
    #   - { name: bit_field_2, bit_assignment: { lsb: 12, width: 4 }, type: ro,                   reference: register_4.bit_field_1 }
    #   - { name: bit_field_3, bit_assignment: { lsb: 16, width: 4 }, type: rs, initial_value: 0 }

    # - name: register_5
    #   offset_address: 0x10
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 2 }, type: rwc, initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb:  2, width: 2 }, type: rwc, initial_value: 0, reference: register_3.bit_field_2 }
    #   - { name: bit_field_2, bit_assignment: { lsb:  4, width: 2 }, type: rws, initial_value: 0 }
    #   - { name: bit_field_3, bit_assignment: { lsb:  6, width: 2 }, type: rws, initial_value: 0, reference: register_3.bit_field_3 }
    #   - { name: bit_field_4, bit_assignment: { lsb:  8, width: 2 }, type: rwe, initial_value: 0 }
    #   - { name: bit_field_5, bit_assignment: { lsb: 10, width: 2 }, type: rwe, initial_value: 0, reference: register_0.bit_field_2 }
    #   - { name: bit_field_6, bit_assignment: { lsb: 12, width: 2 }, type: rwe, initial_value: 0, reference: register_1 }
    #   - { name: bit_field_7, bit_assignment: { lsb: 16, width: 2 }, type: rwl, initial_value: 0 }
    #   - { name: bit_field_8, bit_assignment: { lsb: 18, width: 2 }, type: rwl, initial_value: 0, reference: register_0.bit_field_2 }
    #   - { name: bit_field_9, bit_assignment: { lsb: 20, width: 2 }, type: rwl, initial_value: 0, reference: register_1 }

    # - name: register_6
    #   offset_address: 0x14
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 4 }, type: w0c, initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb:  4, width: 4 }, type: w0c, initial_value: 0, reference: register_0.bit_field_0 }
    #   - { name: bit_field_2, bit_assignment: { lsb:  8, width: 4 }, type: ro ,                   reference: register_6.bit_field_1 }
    #   - { name: bit_field_3, bit_assignment: { lsb: 12, width: 4 }, type: w1c, initial_value: 0 }
    #   - { name: bit_field_4, bit_assignment: { lsb: 16, width: 4 }, type: w1c, initial_value: 0, reference: register_0.bit_field_0 }
    #   - { name: bit_field_5, bit_assignment: { lsb: 20, width: 4 }, type: ro ,                   reference: register_6.bit_field_4 }
    #   - { name: bit_field_6, bit_assignment: { lsb: 24, width: 4 }, type: w0s, initial_value: 0 }
    #   - { name: bit_field_7, bit_assignment: { lsb: 28, width: 4 }, type: w1s, initial_value: 0 }
    #   - { name: bit_field_8, bit_assignment: { lsb: 32, width: 4 }, type: w0t, initial_value: 0 }
    #   - { name: bit_field_9, bit_assignment: { lsb: 36, width: 4 }, type: w1t, initial_value: 0 }

    # - name: register_7
    #   offset_address: 0x1C
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 4 }, type: w0crs, initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb:  8, width: 4 }, type: w1crs, initial_value: 0 }
    #   - { name: bit_field_2, bit_assignment: { lsb: 16, width: 4 }, type: w0src, initial_value: 0 }
    #   - { name: bit_field_3, bit_assignment: { lsb: 24, width: 4 }, type: w1src, initial_value: 0 }

    # - name: register_8
    #   offset_address: 0x20
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 4 }, type: wc  , initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb:  8, width: 4 }, type: ws  , initial_value: 0 }
    #   - { name: bit_field_2, bit_assignment: { lsb: 16, width: 4 }, type: woc , initial_value: 0 }
    #   - { name: bit_field_3, bit_assignment: { lsb: 24, width: 4 }, type: wos , initial_value: 0 }
    #   - { name: bit_field_4, bit_assignment: { lsb: 32, width: 4 }, type: wcrs, initial_value: 0 }
    #   - { name: bit_field_5, bit_assignment: { lsb: 40, width: 4 }, type: wsrc, initial_value: 0 }

    # - name: register_9
    #   offset_address: 0x28
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 2 }, type: rwtrg  , initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb:  2, width: 2 }, type: rotrg  }
    #   - { name: bit_field_2, bit_assignment: { lsb:  4, width: 2 }, type: wotrg  , initial_value: 0 }
    #   - { name: bit_field_3, bit_assignment: { lsb:  6, width: 2 }, type: rowotrg, initial_value: 0 }
    #   - { name: bit_field_4, bit_assignment: { lsb:  8, width: 2 }, type: row0trg }
    #   - { name: bit_field_5, bit_assignment: { lsb: 10, width: 2 }, type: row1trg }

    # - name: register_10
    #   offset_address: 0x30
    #   size: [4, step: 8]
    #   bit_fields:
    #   - <<:
    #     # bit assignments: [1:0] [ 9: 8] [17:16] [25:24]
    #     - { name: bit_field_0, bit_assignment: { lsb: 0, width: 2, sequence_size: 4, step: 8 }, type: rw }
    #     - initial_value: 0
    #   - <<:
    #     # bit assignments: [3:2] [11:10] [19:18] [27:26]
    #     - { name: bit_field_1, bit_assignment: { lsb: 2, width: 2, sequence_size: 4, step: 8 }, type: rw }
    #     - initial_value: { default: 0 }
    #   - <<:
    #     # bit assignments: [5:4] [13:12] [21:20] [29:28]
    #     - { name: bit_field_2, bit_assignment: { lsb: 4, width: 2, sequence_size: 4, step: 8 }, type: rw }
    #     - initial_value: [0, 1, 2, 3]

    # - name: register_11
    #   offset_address: 0x50
    #   size: [2, 4]
    #   type: [indirect, register_0.bit_field_0, register_0.bit_field_1, [register_0.bit_field_2, 0]]
    #   bit_fields:
    #   - # bit assignments: [ 7:0] [23:16] [39:32] [55:48]
    #     { name: bit_field_0, bit_assignment: { lsb: 0, width: 8, sequence_size: 4, step: 16 }, type: rw, initial_value: 0 }
    #   - # bit assignments: [15:8] [31:24] [47:40] [63:56]
    #     { name: bit_field_1, bit_assignment: { lsb: 8, width: 8, sequence_size: 4, step: 16 }, type: rw, initial_value: 0 }

    # - name: register_12
    #   offset_address: 0x50
    #   type: [indirect, [register_0.bit_field_2, 1]]
    #   bit_fields:
    #   - { name: bit_field_0, bit_assignment: { lsb:  0, width: 1}, type: rw, initial_value: 0 }
    #   - { name: bit_field_1, bit_assignment: { lsb: 32, width: 1}, type: rw, initial_value: 0 }

    # - name: register_13
    #   offset_address: 0x60
    #   bit_fields:
    #   - # same with RW bit field type
    #     { name: bit_field_0, bit_assignment: { width: 2 }, initial_value: 0, type: [custom                                         ] }
    #   - # same with RO bit filed type
    #     { name: bit_field_1, bit_assignment: { width: 2 },                   type: [custom, sw_write: none                         ] }
    #   - # same with W1 bit field type
    #     { name: bit_field_2, bit_assignment: { width: 2 }, initial_value: 0, type: [custom, sw_write_once: true                    ] }
    #   - # same with RWTRG bit field type
    #     { name: bit_field_3, bit_assignment: { width: 2 }, initial_value: 0, type: [custom, write_trigger: true, read_trigger: true] }
    #   - # same with W1SRC bit field type
    #     { name: bit_field_4, bit_assignment: { width: 2 }, initial_value: 0, type: [custom, sw_write: set_1  , sw_read: clear      ] }
    #   - # same with W1CRS bit field type
    #     { name: bit_field_5, bit_assignment: { width: 2 }, initial_value: 0, type: [custom, sw_write: clear_1, sw_read: set        ] }
    #   - # same with W1S bit field type
    #     { name: bit_field_6, bit_assignment: { width: 2 }, initial_value: 0, type: [custom, sw_write: set_1  , hw_clear: true      ] }
    #   - # same with W1C bit field type
    #     { name: bit_field_7, bit_assignment: { width: 2 }, initial_value: 0, type: [custom, sw_write: clear_1, hw_set: true        ] }
    #   - # RW bit field with HW write
    #     { name: bit_field_8, bit_assignment: { width: 2 }, initial_value: 0, type: [custom, hw_write: true                         ] }

    # - name: register_14
    #   offset_address: 0x70
    #   type: reserved

    # - name: register_15
    #   offset_address: 0x80
    #   size: 32
    #   type: external